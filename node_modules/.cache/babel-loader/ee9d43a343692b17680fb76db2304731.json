{"ast":null,"code":"var _jsxFileName = \"/Users/mr.hern/Desktop/Bethel School. FInal Pro./Old-To-New/Old-New/src/Components/pages/Map.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"../Map.css\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport mapStyles from \"../services/mapStyles\";\nimport \"../../../src/index.css\"; // import restaurants from \"../services/restaurants.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"90vh\"\n};\nconst center = {\n  lat: 6.44725,\n  lng: 3.47026\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nexport default function App() {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyDZxLM9qBogixwiW2wuYWGqT2bUVWj5KEQ\",\n    libraries\n  });\n  const Res = \"http://localhost:5000/restaurant/\";\n  const [allRests, setAllRests] = useState([]);\n  const [selectedRes, setSelectedRes] = useState(null);\n  useEffect(() => {\n    axios.get(Res).then(response => {\n      console.log(response.data.restaurants);\n      setAllRests(response.data.restaurants);\n    });\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      panTo: panTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Locate, {\n      panTo: panTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 14,\n      center: center,\n      options: options,\n      onLoad: onMapLoad //bounds\n      ,\n      children: [allRests.map(res => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: res.coordinates[0],\n          lng: res.coordinates[1]\n        },\n        onClick: () => {\n          setSelectedRes(res);\n        },\n        icon: {\n          url: \"/map-marker.png\",\n          scaledSize: new window.google.maps.Size(40, 40)\n        }\n      }, res._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)), selectedRes && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedRes.coordinates[0],\n          lng: selectedRes.coordinates[1]\n        },\n        onCloseClick: () => {\n          setSelectedRes(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"resNameMap\",\n            children: selectedRes.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedRes.rating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedRes.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n} //THIS FUNCTION ZOOMS IN ON THE USERS CURRENT LOCATION\n\n_s(App, \"z3BbTTS08wLg9jR/Gl+ccdT4ptA=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"location\",\n      src: \"location.png\",\n      alt: \"location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n} //THIS FUNCTION IS FOR THE GOOGLE PLACES API\n\n\n_c2 = Locate;\n\nfunction Search({\n  panTo\n}) {\n  _s2();\n\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 6.44725,\n        lng: () => 3.47026\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: /*#__PURE__*/_jsxDEV(Combobox, {\n      onSelect: async address => {\n        setValue(address, false);\n        clearSuggestions();\n\n        try {\n          const results = await getGeocode({\n            address\n          });\n          const {\n            lat,\n            lng\n          } = await getLatLng(results[0]);\n          panTo({\n            lat,\n            lng\n          });\n        } catch (error) {\n          console.log(\"error\");\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(ComboboxInput, {\n        className: \"zoomcity\",\n        value: value,\n        onChange: e => {\n          setValue(e.target.value);\n        },\n        disabled: !ready,\n        placeholder: \"Zoom in to your City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ComboboxPopover, {\n        children: /*#__PURE__*/_jsxDEV(ComboboxList, {\n          children: status === \"OK\" && data.map(({\n            id,\n            description\n          }) => /*#__PURE__*/_jsxDEV(ComboboxOption, {\n            value: description\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Search, \"D6hJ+w6b1RCkdTlt9AbdYG9Ebfw=\", false, function () {\n  return [usePlacesAutocomplete];\n});\n\n_c3 = Search;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Locate\");\n$RefreshReg$(_c3, \"Search\");","map":{"version":3,"sources":["/Users/mr.hern/Desktop/Bethel School. FInal Pro./Old-To-New/Old-New/src/Components/pages/Map.js"],"names":["React","useEffect","useState","axios","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","mapStyles","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","App","isLoaded","loadError","googleMapsApiKey","Res","allRests","setAllRests","selectedRes","setSelectedRes","get","then","response","console","log","data","restaurants","mapRef","useRef","onMapLoad","useCallback","map","current","panTo","setZoom","res","coordinates","url","scaledSize","window","google","maps","Size","_id","name","rating","location","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","setValue","clearSuggestions","requestOptions","radius","address","results","error","e","target","id","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"../Map.css\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport mapStyles from \"../services/mapStyles\";\nimport \"../../../src/index.css\";\n\n// import restaurants from \"../services/restaurants.json\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"90vh\",\n};\n\nconst center = {\n  lat: 6.44725,\n  lng: 3.47026,\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyDZxLM9qBogixwiW2wuYWGqT2bUVWj5KEQ\",\n    libraries,\n  });\n\n  const Res = \"http://localhost:5000/restaurant/\";\n\n  const [allRests, setAllRests] = useState([]);\n\n  const [selectedRes, setSelectedRes] = useState(null);\n\n  useEffect(() => {\n    axios.get(Res).then((response) => {\n      console.log(response.data.restaurants);\n\n      setAllRests(response.data.restaurants);\n    });\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(14);\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n\n  return (\n    <div>\n      <Search panTo={panTo} />\n      <Locate panTo={panTo} />\n\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={14}\n        center={center}\n        options={options}\n        onLoad={onMapLoad}\n        //bounds\n      >\n        {allRests.map((res) => (\n          <Marker\n            key={res._id}\n            position={{\n              lat: res.coordinates[0],\n              lng: res.coordinates[1],\n            }}\n            onClick={() => {\n              setSelectedRes(res);\n            }}\n            icon={{\n              url: \"/map-marker.png\",\n              scaledSize: new window.google.maps.Size(40, 40),\n            }}\n          />\n        ))}\n        {/* THIS RENDERS TO INFORMATION WINDOW WHEN A PIN IS CLICKED */}\n        {selectedRes && (\n          <InfoWindow\n            position={{\n              lat: selectedRes.coordinates[0],\n              lng: selectedRes.coordinates[1],\n            }}\n            onCloseClick={() => {\n              setSelectedRes(null);\n            }}\n          >\n            <div>\n              <h2 className=\"resNameMap\">{selectedRes.name}</h2>\n              <p>{selectedRes.rating}</p>\n              <p>{selectedRes.location}</p>\n            </div>\n          </InfoWindow>\n        )}\n        ;\n      </GoogleMap>\n    </div>\n  );\n}\n\n//THIS FUNCTION ZOOMS IN ON THE USERS CURRENT LOCATION\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null\n        );\n      }}\n    >\n      <img className=\"location\" src=\"location.png\" alt=\"location\" />\n    </button>\n  );\n}\n\n//THIS FUNCTION IS FOR THE GOOGLE PLACES API\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 6.44725, lng: () => 3.47026 },\n      radius: 200 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error\");\n          }\n        }}\n      >\n        <ComboboxInput\n          className=\"zoomcity\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disabled={!ready}\n          placeholder=\"Zoom in to your City\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}