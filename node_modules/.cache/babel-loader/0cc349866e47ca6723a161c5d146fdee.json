{"ast":null,"code":"var _jsxFileName = \"/Users/mr.hern/Desktop/front-end/react-frontend/src/Components/pages/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\"; // import usePlacesAutocomplete, {\n//   getGeocode,\n//   getLatLng,\n// } from 'use-places-autocomplete'\n// import {Combobox} from '@reach/combobox'\n\nimport mapStyles from \"../services/mapStyles\"; // import restaurants from \"../services/restaurants.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"90vh\"\n};\nconst center = {\n  lat: 46.595806,\n  lng: -112.027031\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nexport default function App() {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyDZxLM9qBogixwiW2wuYWGqT2bUVWj5KEQ\"\n  });\n  const Res = \"http://localhost:5000/restaurant/\"; // function displayRestaurantAround(){\n  //   return new Promise ((resolve, reject) => {\n  //     this.service.nearbySearch({\n  //       location: currentUserPosition,\n  //       radius: 5000,\n  //       types: [restaurant]\n  //     }, (res)=>{\n  //       resolve(res);\n  //     })\n  //   })\n  // }\n\n  const [allRests, setAllRests] = useState([]); // const [lat, setLat] = useState([]);\n  // const [long, setLong] = useState([]);\n  // console.log(lat)\n  // console.log(long)\n  // const points = [lat, long]\n\n  const [selectedRes, setSelectedRes] = useState(null); //   console.log(allRests);\n\n  useEffect(() => {\n    axios.get(Res).then(response => {\n      console.log(response.data.restaurants);\n      setAllRests(response.data.restaurants); // setLat(response.data.restaurants[0].coordinates[0]);\n      // setLong(response.data.restaurants[0].coordinates[1]);\n      // console.log(setLong);\n      // console.log(response.data.restaurants.coordinates);\n    });\n  }, []); // const markerLoop = points.map((point, id)=> {\n  //   return (\n  //     // console.log(point)\n  //   )\n  // })\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" The Local Fork \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 14,\n      center: center,\n      options: options,\n      onLoad: onMapLoad //bounds\n      ,\n      children: [allRests.map(res => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: res.coordinates[0],\n          lng: res.coordinates[1]\n        },\n        onClick: () => {\n          setSelectedRes(res);\n        },\n        icon: {\n          url: \"/fork-icom.png\",\n          scaledSize: new window.google.maps.Size(40, 40)\n        }\n      }, res._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)), selectedRes && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selectedRes.coordinates[0],\n          lng: selectedRes.coordinates[1]\n        },\n        onCloseClick: () => {\n          setSelectedRes(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedRes.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: selectedRes.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Opening hours: \", selectedRes.hours]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sb67fwJflvkqYwkpsBvafwHGT3s=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mr.hern/Desktop/front-end/react-frontend/src/Components/pages/Map.js"],"names":["React","useEffect","useState","axios","GoogleMap","useLoadScript","Marker","InfoWindow","Geocode","mapStyles","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","App","isLoaded","loadError","googleMapsApiKey","Res","allRests","setAllRests","selectedRes","setSelectedRes","get","then","response","console","log","data","restaurants","mapRef","useRef","onMapLoad","useCallback","map","current","res","coordinates","url","scaledSize","window","google","maps","Size","_id","name","location","hours"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\";\n\n// import usePlacesAutocomplete, {\n//   getGeocode,\n//   getLatLng,\n// } from 'use-places-autocomplete'\n// import {Combobox} from '@reach/combobox'\nimport mapStyles from \"../services/mapStyles\";\n// import restaurants from \"../services/restaurants.json\";\n\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"90vh\",\n};\n\nconst center = {\n  lat: 46.595806,\n  lng: -112.027031,\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyDZxLM9qBogixwiW2wuYWGqT2bUVWj5KEQ\",\n  });\n\n  const Res = \"http://localhost:5000/restaurant/\";\n\n  // function displayRestaurantAround(){\n  //   return new Promise ((resolve, reject) => {\n  //     this.service.nearbySearch({\n  //       location: currentUserPosition,\n  //       radius: 5000,\n  //       types: [restaurant]\n  //     }, (res)=>{\n  //       resolve(res);\n  //     })\n  //   })\n  // }\n\n  const [allRests, setAllRests] = useState([]);\n  // const [lat, setLat] = useState([]);\n  // const [long, setLong] = useState([]);\n  // console.log(lat)\n  // console.log(long)\n\n  // const points = [lat, long]\n  const [selectedRes, setSelectedRes] = useState(null);\n  //   console.log(allRests);\n\n  useEffect(() => {\n    axios.get(Res).then((response) => {\n      console.log(response.data.restaurants);\n\n      setAllRests(response.data.restaurants);\n      // setLat(response.data.restaurants[0].coordinates[0]);\n      // setLong(response.data.restaurants[0].coordinates[1]);\n\n      // console.log(setLong);\n      // console.log(response.data.restaurants.coordinates);\n    });\n  }, []);\n\n  // const markerLoop = points.map((point, id)=> {\n  //   return (\n  //     // console.log(point)\n  //   )\n  // })\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n\n  return (\n    <div>\n      <h1> The Local Fork </h1>\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={14}\n        center={center}\n        options={options}\n        onLoad={onMapLoad}\n        //bounds\n      >\n        {allRests.map((res) => (\n          <Marker\n            key={res._id}\n            position={{\n              lat: res.coordinates[0],\n              lng: res.coordinates[1],\n            }}\n            onClick={() => {\n              setSelectedRes(res);\n            }}\n            icon={{\n              url: \"/fork-icom.png\",\n              scaledSize: new window.google.maps.Size(40, 40),\n            }}\n          />\n        ))}\n        {selectedRes && (\n          <InfoWindow\n            position={{\n              lat: selectedRes.coordinates[0],\n              lng: selectedRes.coordinates[1],\n            }}\n            onCloseClick={() => {\n              setSelectedRes(null);\n            }}\n          >\n            <div>\n              <h2>{selectedRes.name}</h2>\n              <h3>{selectedRes.location}</h3>\n              <h3>Opening hours: {selectedRes.hours}</h3>\n            </div>\n          </InfoWindow>\n        )}\n        ;\n      </GoogleMap>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}